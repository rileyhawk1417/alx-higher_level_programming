===============================
The ``4-print_square`` module
===============================

Using ``print_square``
=======================

``print_square(...)`` prints a square from the ``size`` given.
The height & width of the square come from the ``size``

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(2) 
    ##
    ##

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(5) 
    #####
    #####
    #####
    #####
    #####

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(3) 
    ###
    ###
    ###

If ``size`` is 0 it will print nothing.

::

    >>> print_square(0) 

Invalid Sizes
================

``size`` must be an integer. If not Raise a TypeError

::

    >>> print_square("size for a square")
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(8.8)
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer

If ``size`` is less than 0, raise a ValueError
::

    >>> print_square(-10)
    Traceback (most recent call last):
    ValueError: size must be >= 0

Type checking errors happen before value checking
::

    >>> print_square(-2.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

At least provide one argument
::

    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'
